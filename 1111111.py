# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника. Используйте
# в нём формулу: (выработка в часах*ставка в час) + премия. Во время выполнения расчёта для конкретных значений
# необходимо запускать скрипт с параметрами.

from sys import argv

print('Hey! Вы написали сколько часов проработал ваш сотрудник, сколько он получает в час и какую премию вы собираетесь ему заплатить!! Мы расчитали все!')

def sallary_count(hours,rate, bonus):
    return hours * rate + bonus
print(argv)

print(sallary_count(int(argv[1]),int(argv[2]),int(argv[3])))


# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего
# элемента. Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте
# генератор. Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]. Результат: [12, 44, 4, 10,
# 78, 123].
# #
import random
import functools
import itertools

def generate_list(from_x=1,to_y=999,number_of_elements=100,kratnoye = 1):
    def generator():
        for i in range(1,number_of_elements+1):
            kkk = random.randint(from_x,to_y)
            yield kkk
    ateros = []
    for elem in generator():
        if elem % kratnoye == 0:
            ateros.append(elem)
    return ateros

malist_2 = generate_list(1,40,30)
malist_2_1 = []
for i in range(1,len(malist_2)):
    if malist_2[i] > malist_2[i-1]:
        malist_2_1.append(malist_2[i])
print(malist_2)
print(malist_2_1)
3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
Подсказка: используйте функцию range() и генератор.


k = [el for el in range(20,241) if el % 20 == 0 or el % 21 == 0]
print(k)




# 4. Представлен список чисел. Определите элементы списка, не имеющие повторений. Сформируйте итоговый массив чисел,
# соответствующих требованию. Элементы выведите в порядке их следования в исходном списке. Для выполнения задания
# обязательно используйте генератор. Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4,
# 11]. Результат: [23, 1, 3, 10, 4, 11]


list_k = generate_list(1,500,500)
print(list_k)
list_b = []
for i in list_k:
   if list_k.count(i) == 1:
       list_b.append(i)
print(list_b)


# 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти
# чётные числа от 100 до 1000 (включая границы). Нужно получить результат вычисления произведения всех элементов
# списка. Подсказка: использовать функцию reduce().

k = [el for el in range(100,1001) if el%2==0]
umnozhitchisla = lambda a,b: a*b
print(functools.reduce(umnozhitchisla,k))


# 6. Реализовать два небольших скрипта: итератор, генерирующий целые числа, начиная с указанного; итератор,
# повторяющий элементы некоторого списка, определённого заранее. Подсказка: используйте функцию count() и cycle()
# модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным. Предусмотрите условие его
# завершения. #### Например, в первом задании выводим целые числа, начиная с 3. При достижении числа 10 — завершаем
# цикл. Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится.
x = int(input('Укажите целое число '))
y = []
for i in itertools.count(x):
    print(i)
    y.append(i)
    if i>=10:
        break
print(y)
k = 0
for i in itertools.cycle(y):
    print(i)
    k += 1
    if k >=16:
        break



# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове
# функции должен создаваться объект-генератор. Функция вызывается следующим образом: for el in fact(n). Она отвечает
# за получение факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!. Подсказка:
# факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.


def generate_list(from_x=1,to_y=999,number_of_elements=100,kratnoye = 1):
    def generator():
        for i in range(1,number_of_elements+1):
            kkk = random.randint(from_x,to_y)
            yield kkk
    ateros = []
    for elem in generator():
        if elem % kratnoye == 0:
            ateros.append(elem)
    return ateros

def fact(n):
    list = []
    for i in range(1,n+1):
        list.append(i)
    mul_nums = lambda a,b: a*b
    yield functools.reduce(mul_nums,list)

for el in fact(7):
    print(el)




